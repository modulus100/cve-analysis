package mek.backend.analytics.repository

import mek.backend.analytics.api.*
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate
import org.springframework.stereotype.Component
import java.util.*

@Component
class VulnerabilityMetricRepository(
    private val jdbcTemplate: NamedParameterJdbcTemplate
) {

    fun searchVulnerabilityMetrics(searchRequest: VulnerabilityMetricSearchRequest): List<VulnerabilityMetricEntity> {
        val sqlBuilder = StringBuilder("select * from vulnerability_metrics where ")
        val params = mutableMapOf<String, Any>()

        if (searchRequest.vulnerabilityId != null) {
            sqlBuilder.append("vulnerability_id = :vulnerabilityId ")
            params["vulnerabilityId"] = searchRequest.vulnerabilityId
        }

        searchRequest.metricType?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("metric_type = :metricType ")
            params["metricType"] = it.value
        }

        searchRequest.version?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("version = :version ")
            params["version"] = it.value
        }

        searchRequest.vectorString?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("vector_string like :vectorString ")
            params["vectorString"] = "%$it%"
        }

        searchRequest.baseScoreMin?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("base_score >= :baseScoreMin ")
            params["baseScoreMin"] = it
        }

        searchRequest.baseScoreMax?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("base_score <= :baseScoreMax ")
            params["baseScoreMax"] = it
        }

        searchRequest.baseSeverity?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("base_severity = :baseSeverity ")
            params["baseSeverity"] = it.value
        }

        searchRequest.attackVector?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.attackVector === AttackVector.Null) {
                sqlBuilder.append("attack_vector is null ")
            } else {
                sqlBuilder.append("attack_vector = :attackVector ")
            }
            params["attackVector"] = it.value
        }

        searchRequest.attackComplexity?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.attackComplexity === AttackComplexity.Null) {
                sqlBuilder.append("attack_complexity is null ")
            } else {
                sqlBuilder.append("attack_complexity = :attackComplexity ")
            }

            params["attackComplexity"] = it.value
        }

        searchRequest.privilegesRequired?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.privilegesRequired === PrivilegasRequired.Null) {
                sqlBuilder.append("privileges_required is null ")
            } else {
                sqlBuilder.append("privileges_required = :privilegesRequired ")
            }

            params["privilegesRequired"] = it.value
        }

        searchRequest.userInteraction?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.userInteraction === UserInteraction.Null) {
                sqlBuilder.append("user_interaction is null ")
            } else {
                sqlBuilder.append("user_interaction = :userInteraction ")
            }

            params["userInteraction"] = it.value
        }

        searchRequest.confidentialityImpact?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.confidentialityImpact === ConfidentialityImpact.Null) {
                sqlBuilder.append("confidentiality_impact is null ")
            } else {
                sqlBuilder.append("confidentiality_impact = :confidentialityImpact ")
            }

            params["confidentialityImpact"] = it.value
        }

        searchRequest.integrityImpact?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.integrityImpact === IntegrityImpact.Null) {
                sqlBuilder.append("integrity_impact is null ")
            } else {
                sqlBuilder.append("integrity_impact = :integrityImpact ")
            }

            params["integrityImpact"] = it.value
        }

        searchRequest.availabilityImpact?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }

            if (searchRequest.availabilityImpact === AvailabilityImpact.Null) {
                sqlBuilder.append("availability_impact is null ")
            } else {
                sqlBuilder.append("availability_impact = :availabilityImpact ")
            }

            params["availabilityImpact"] = it.value
        }

        searchRequest.exploitabilityScoreMin?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("AND ")
            }
            sqlBuilder.append("exploitability_score >= :exploitabilityScoreMin ")
            params["exploitabilityScoreMin"] = it
        }

        searchRequest.exploitabilityScoreMax?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("exploitability_score <= :exploitabilityScoreMax ")
            params["exploitabilityScoreMax"] = it
        }

        searchRequest.impactScoreMin?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("impact_score >= :impactScoreMin ")
            params["impactScoreMin"] = it
        }

        searchRequest.impactScoreMax?.let {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("impact_score <= :impactScoreMax ")
            params["impactScoreMax"] = it
        }

        val sql = sqlBuilder.toString()

        return jdbcTemplate.query(sql, params) { rs, _ ->
            VulnerabilityMetricEntity(
                id = rs.getObject("id", UUID::class.java),
                vulnerabilityId = rs.getObject("vulnerability_id", UUID::class.java),
                metricsName = rs.getString("metric_name"),
                metricType = MetricType.fromValue(rs.getString("metric_type")),
                version = CvssMetricVersion.fromValue(rs.getString("version")),
                vectorString = rs.getString("vector_string"),
                attackVector = AttackVector.fromValue(rs.getString("attack_vector")),
                attackComplexity = AttackComplexity.fromValue(rs.getString("attack_complexity")),
                privilegesRequired = PrivilegasRequired.fromValue(rs.getString("privileges_required")),
                userInteraction = UserInteraction.fromValue(rs.getString("user_interaction")),
                confidentialityImpact = ConfidentialityImpact.fromValue(rs.getString("confidentiality_impact")),
                integrityImpact = IntegrityImpact.fromValue(rs.getString("integrity_impact")),
                availabilityImpact = AvailabilityImpact.fromValue(rs.getString("availability_impact")),
                baseScore = rs.getDouble("base_score"),
                baseSeverity = Severity.fromValue(rs.getString("base_severity")),
                exploitabilityScore = rs.getDouble("exploitability_score"),
                impactScore = rs.getDouble("impact_score")
            )
        }
    }
}
