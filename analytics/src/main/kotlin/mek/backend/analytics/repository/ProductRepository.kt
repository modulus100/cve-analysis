package mek.backend.analytics.repository

import mek.backend.analytics.api.ProductEntity
import mek.backend.analytics.api.ProductSearchRequest
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate
import org.springframework.stereotype.Component
import java.util.*

@Component
class ProductRepository(
    private val jdbcTemplate: NamedParameterJdbcTemplate
) {

    fun searchProducts(searchRequest: ProductSearchRequest): List<ProductEntity> {
        val sqlBuilder = StringBuilder("select * from products where ")
        val params = mutableMapOf<String, String>()
        val (productName, vendorName) = searchRequest

        if (!productName.isNullOrEmpty()) {
            sqlBuilder.append("product_name LIKE :productName ")
            params["productName"] = "%$productName%"
        }

        if (!vendorName.isNullOrEmpty()) {
            if (params.isNotEmpty())  {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("vendor_name LIKE :vendorName")
            params["vendorName"] = "%$vendorName%"
        }

        val sql = sqlBuilder.toString()
        val products = jdbcTemplate.query(
            sql,
            params
        ) { rs, _ ->
            ProductEntity(
                id = rs.getObject("id", UUID::class.java),
                productName = rs.getString("product_name"),
                vendorName = rs.getString("vendor_name"),
            )
        }

        return products
    }
}