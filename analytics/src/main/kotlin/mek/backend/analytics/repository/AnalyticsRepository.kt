package mek.backend.analytics.repository

import mek.backend.analytics.api.*
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate
import org.springframework.stereotype.Component

@Component
class AnalyticsRepository(
    private val jdbcTemplate: NamedParameterJdbcTemplate
) {

    fun severityDistribution(): List<SeverityDistribution> {
        return jdbcTemplate.query(
            """
                SELECT base_severity, COUNT(*) AS count
                FROM vulnerability_metrics
                GROUP BY base_severity;
            """.trimIndent()
        ) { rs, _ ->
            SeverityDistribution(
                Severity.fromValue(rs.getString("base_severity")), rs.getLong("count")
            )
        }
    }

    fun worstProducts(top: Int): List<WorstProduct> {
        return jdbcTemplate.query(
            """
                SELECT p.product_name, p.vendor_name, COUNT(pvuln.vulnerability_id) AS vulnerability_count
                FROM products p
                     JOIN product_versions pv ON p.id = pv.product_id
                     JOIN product_vulnerabilities pvuln ON pv.id = pvuln.product_version_id
                GROUP BY p.product_name, p.vendor_name
                ORDER BY vulnerability_count DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            WorstProduct(
                productName = rs.getString("product_name"),
                vendorName = rs.getString("vendor_name"),
                vulnerabilityCount = rs.getLong("vulnerability_count")
            )
        }
    }

    fun worstPlatforms(top: Int): List<WorstPlatform> {
        return jdbcTemplate.query(
            """
                SELECT p.vendor_name, COUNT(pvuln.vulnerability_id) AS vulnerability_count
                FROM products p
                     JOIN product_versions pv ON p.id = pv.product_id
                     JOIN product_vulnerabilities pvuln ON pv.id = pvuln.product_version_id
                GROUP BY p.vendor_name
                ORDER BY vulnerability_count DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            WorstPlatform(
                vendorName = rs.getString("vendor_name"),
                vulnerabilityCount = rs.getLong("vulnerability_count")
            )
        }
    }

    fun highestImpactVulnerabilities(top: Int): List<HighestImpactVulnerabilitiesResponse.Vulnerability> {
        return jdbcTemplate.query(
            """
                SELECT v.cve_id, vm.impact_score
                FROM vulnerabilities v
                    JOIN vulnerability_metrics vm ON v.id = vm.vulnerability_id
                WHERE impact_score IS NOT NULL
                ORDER BY vm.impact_score DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            HighestImpactVulnerabilitiesResponse.Vulnerability(
                cveId = rs.getString("cve_id"),
                impactScore = rs.getLong("impact_score")
            )
        }
    }


    fun highestExploitabilityScores(top: Int): List<ExploitabilityScore> {
        return jdbcTemplate.query(
            """
                SELECT v.cve_id, vm.exploitability_score
                FROM vulnerabilities v
                    JOIN vulnerability_metrics vm ON v.id = vm.vulnerability_id
                WHERE exploitability_score IS NOT NULL
                ORDER BY vm.exploitability_score DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            ExploitabilityScore(
                cveId = rs.getString("cve_id"),
                exploitabilityScore = rs.getLong("exploitability_score")
            )
        }
    }

    fun topVectorAttacks(top: Int): List<VectorAttackCount> {
        return jdbcTemplate.query(
            """
                SELECT attack_vector, COUNT(*) AS count
                FROM vulnerability_metrics
                GROUP BY attack_vector
                ORDER BY count DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            VectorAttackCount(
                name = AttackVector.fromValue(rs.getString("attack_vector")),
                count = rs.getLong("count")
            )
        }
    }


    fun topVectorStrings(top: Int): List<VectorStringCount> {
        return jdbcTemplate.query(
            """
                SELECT vector_string, COUNT(*) AS count
                FROM vulnerability_metrics
                GROUP BY vector_string
                ORDER BY count DESC
                LIMIT :top;
            """.trimIndent(),
            mapOf("top" to top)
        ) { rs, _ ->
            VectorStringCount(
                vectorString = rs.getString("vector_string"),
                count = rs.getLong("count")
            )
        }
    }
}