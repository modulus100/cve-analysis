package mek.backend.analytics.repository

import mek.backend.analytics.api.VulnerabilityEntity
import mek.backend.analytics.api.VulnerabilitySearchRequest
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate
import org.springframework.stereotype.Component
import java.sql.Timestamp
import java.util.*

@Component
class VulnerabilityRepository(
    private val jdbcTemplate: NamedParameterJdbcTemplate
) {

    fun searchVulnerabilities(searchRequest: VulnerabilitySearchRequest): List<VulnerabilityEntity> {
        val sqlBuilder = StringBuilder("select * from vulnerabilities where ")
        val params = mutableMapOf<String, Any>()

        if (!searchRequest.cveId.isNullOrEmpty()) {
            sqlBuilder.append("cve_id like :cveId ")
            params["cveId"] = "%${searchRequest.cveId}%"
        }

        if (searchRequest.publishDateStart != null) {
            if (params.isNotEmpty())  {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("published_date >= :publishDateStart ")
            params["publishDateStart"] = Timestamp.from(searchRequest.publishDateStart)
        }

        if (searchRequest.publishDateEnd != null) {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("published_date <= :publishDateEnd ")
            params["publishDateEnd"] = Timestamp.from(searchRequest.publishDateEnd)
        }

        if (searchRequest.lastModifiedDateStart != null) {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("last_modified_date >= :lastModifiedDateStart ")
            params["lastModifiedDateStart"] = Timestamp.from(searchRequest.lastModifiedDateStart)
        }

        if (searchRequest.lastModifiedDateEnd != null) {
            if (params.isNotEmpty()) {
                sqlBuilder.append("and ")
            }
            sqlBuilder.append("last_modified_date <= :lastModifiedDateEnd ")
            params["lastModifiedDateEnd"] = Timestamp.from(searchRequest.lastModifiedDateEnd)
        }

        val sql = sqlBuilder.toString()
        val products = jdbcTemplate.query(sql, params) { rs, _ ->
            VulnerabilityEntity(
                id = rs.getObject("id", UUID::class.java),
                cveId = rs.getString("cve_id"),
                description = rs.getString("description"),
                publishDate = rs.getTimestamp("published_date").toInstant(),
                lastModifiedDate = rs.getTimestamp("last_modified_date").toInstant()
            )
        }

        return products
    }
}

