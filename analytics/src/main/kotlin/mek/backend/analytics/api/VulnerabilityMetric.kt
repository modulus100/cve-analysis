package mek.backend.analytics.api

import java.util.UUID

data class VulnerabilityMetricEntity(
    val id: UUID,
    val vulnerabilityId: UUID,
    val metricsName: String,
    val metricType: MetricType,
    var version: CvssMetricVersion,
    var vectorString: String,
    var attackVector: AttackVector,
    var attackComplexity: AttackComplexity,
    var privilegesRequired: PrivilegasRequired,
    var userInteraction: UserInteraction,
    var confidentialityImpact: ConfidentialityImpact?,
    var integrityImpact: IntegrityImpact,
    var availabilityImpact: AvailabilityImpact,
    var baseScore: Double,
    var baseSeverity: Severity,
    var exploitabilityScore: Double?,
    var impactScore: Double?
) {
    fun toMetric(): VulnerabilityMetric {
        return VulnerabilityMetric(
            id = this.id,
            vulnerabilityId = this.vulnerabilityId,
            metricsName = this.metricsName,
            metricType = this.metricType,
            version = this.version,
            vectorString = this.vectorString,
            attackVector = this.attackVector,
            attackComplexity = this.attackComplexity,
            privilegesRequired = this.privilegesRequired,
            userInteraction = this.userInteraction,
            confidentialityImpact = this.confidentialityImpact,
            integrityImpact = this.integrityImpact,
            availabilityImpact = this.availabilityImpact,
            baseScore = this.baseScore,
            baseSeverity = this.baseSeverity,
            exploitabilityScore = this.exploitabilityScore,
            impactScore = this.impactScore
        )
    }
}


enum class AttackVector(val value: String) {
    Local("LOCAL"),
    AdjacentNetwork("ADJACENT_NETWORK"),
    Network("NETWORK"),
    Physical("PHYSICAL"),
    Null("NULL");

    companion object {
        fun fromValue(value: String?): AttackVector {
            return AttackVector.entries.find { it.value == value } ?: Null
        }
    }
}

enum class AttackComplexity(val value: String) {
    High("HIGH"),
    Low("LOW"),
    Null("NULL");

    companion object {
        fun fromValue(value: String?): AttackComplexity {
            return AttackComplexity.entries.find { it.value == value } ?: Null
        }
    }
}

enum class PrivilegasRequired(val value: String) {
    None("NONE"),
    High("HIGH"),
    Low("LOW"),
    Null("NULL");

    companion object {
        fun fromValue(value: String?): PrivilegasRequired {
            return PrivilegasRequired.entries.find { it.value == value } ?: None
        }
    }
}

enum class UserInteraction(val value: String) {
    Required("REQUIRED"),
    None("NONE"),
    Null("NULL");

    companion object {
        fun fromValue(value: String?): UserInteraction {
            return UserInteraction.entries.find { it.value == value } ?: Null
        }
    }
}

enum class ConfidentialityImpact(val value: String) {
    Null("NULL"),
    None("NONE"),
    High("HIGH"),
    Low("LOW"),
    Partial("PARTIAL"),
    Complete("COMPLETE");

    companion object {
        fun fromValue(value: String?): ConfidentialityImpact {
            return ConfidentialityImpact.entries.find { it.value == value } ?: Null
        }
    }
}

enum class IntegrityImpact(val value: String) {
    Null("NULL"),
    None("NONE"),
    High("HIGH"),
    Low("LOW"),
    Partial("PARTIAL"),
    Complete("COMPLETE");

    companion object {
        fun fromValue(value: String?): IntegrityImpact {
            return IntegrityImpact.entries.find { it.value == value } ?: Null
        }
    }
}


enum class MetricType(val value: String) {
    Primary("Primary"),
    Secondary("Secondary");

    companion object {
        fun fromValue(value: String?): MetricType {
            return MetricType.entries.find { it.value == value } ?: Primary
        }
    }
}

enum class Severity(val value: String) {
    Low("LOW"),
    Medium("MEDIUM"),
    High("HIGH"),
    Critical("CRITICAL"),
    Null("NULL");

    companion object {
        fun fromValue(value: String?): Severity {
            return Severity.entries.find { it.value == value } ?: Null
        }
    }
}

enum class CvssMetricVersion(val value: String) {
    V2("2.0"),
    V30("3.0"),
    V40("4.0"),
    V31("3.1");

    companion object {
        fun fromValue(value: String?): CvssMetricVersion {
            return entries.find { it.value == value } ?: V2
        }
    }
}

enum class AvailabilityImpact(val value: String) {
    Null("NULL"),
    None("NONE"),
    High("HIGH"),
    Low("LOW"),
    Partial("PARTIAL"),
    Complete("COMPLETE");

    companion object {
        fun fromValue(value: String?): AvailabilityImpact {
            return AvailabilityImpact.entries.find { it.value == value } ?: Null
        }
    }
}

// openapi
data class VulnerabilityMetric(
    val id: UUID,
    val vulnerabilityId: UUID,
    val metricsName: String,
    val metricType: MetricType,
    var version: CvssMetricVersion,
    var vectorString: String,
    var attackVector: AttackVector,
    var attackComplexity: AttackComplexity,
    var privilegesRequired: PrivilegasRequired,
    var userInteraction: UserInteraction,
    var confidentialityImpact: ConfidentialityImpact?,
    var integrityImpact: IntegrityImpact,
    var availabilityImpact: AvailabilityImpact,
    var baseScore: Double,
    var baseSeverity: Severity,
    var exploitabilityScore: Double?,
    var impactScore: Double?
)

data class VulnerabilityMetricSearchResponse(
    val vulnerabilityMetrics: List<VulnerabilityMetric>
)

data class VulnerabilityMetricSearchRequest(
    val vulnerabilityId: UUID?,
    val metricType: MetricType?,
    var version: CvssMetricVersion?,
    var vectorString: String?,
    var baseScoreMin: Double?,
    var baseScoreMax: Double?,
    var baseSeverity: Severity?,
    var attackVector: AttackVector?,
    var attackComplexity: AttackComplexity?,
    var privilegesRequired: PrivilegasRequired?,
    var userInteraction: UserInteraction?,
    var confidentialityImpact: ConfidentialityImpact?,
    var integrityImpact: IntegrityImpact?,
    var availabilityImpact: AvailabilityImpact?,
    var exploitabilityScoreMin: Double?,
    var exploitabilityScoreMax: Double?,
    var impactScoreMin: Double?,
    var impactScoreMax: Double?
)

