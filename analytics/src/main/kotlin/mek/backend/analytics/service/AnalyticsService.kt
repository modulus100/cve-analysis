package mek.backend.analytics.service

import mek.backend.analytics.api.*
import mek.backend.analytics.repository.ProductRepository
import mek.backend.analytics.repository.VulnerabilityMetricRepository
import mek.backend.analytics.repository.VulnerabilityRepository
import org.apache.commons.lang3.ObjectUtils
import org.springframework.stereotype.Service

@Service
class AnalyticsService(
    private val productRepository: ProductRepository,
    private val vulnerabilityRepository: VulnerabilityRepository,
    private val vulnerabilityMetricRepository: VulnerabilityMetricRepository,
) {

    fun searchProducts(request: ProductSearchRequest): ProductSearchResponse {
        if (request.productName.isNullOrEmpty() && request.vendorName.isNullOrEmpty()) {
            return ProductSearchResponse(listOf())
        }

        val products = productRepository.searchProducts(request)

        return ProductSearchResponse(
            products = products.map {
                Product(
                    id = it.id,
                    productName = it.productName,
                    vendorName = it.vendorName,
                )
            }
        )
    }

    fun searchVulnerabilities(request: VulnerabilitySearchRequest): VulnerabilitySearchResponse {
        if (ObjectUtils.allNull(request)) {
            return VulnerabilitySearchResponse(listOf())
        }

        return VulnerabilitySearchResponse(
            vulnerabilities = vulnerabilityRepository.searchVulnerabilities(request).map {
                Vulnerability(
                    cveId = it.cveId,
                    description = it.description,
                    publishDate = it.publishDate,
                    lastModifiedDate = it.lastModifiedDate,
                )
            }
        )
    }

    fun searchVulnerabilityMetrics(request: VulnerabilityMetricSearchRequest): VulnerabilityMetricSearchResponse {
        if (ObjectUtils.allNull(request)) {
            return VulnerabilityMetricSearchResponse(listOf())
        }

        return VulnerabilityMetricSearchResponse(
            vulnerabilityMetrics = vulnerabilityMetricRepository.searchVulnerabilityMetrics(request).
            map { it.toMetric() }
        )
    }
}