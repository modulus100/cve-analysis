package mek.backend.service.api

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.responses.ApiResponses
import io.swagger.v3.oas.annotations.tags.Tag
import mek.backend.analytics.api.*
import mek.backend.analytics.service.AnalyticsService
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController
import java.util.*


@Tag(name = "Vulnerability metrics", description = "Vulnerability metrics related endpoints")
@RequestMapping("/vulnerability-metrics")
@RestController
class VulnerabilityMetricsRestApi(
    private val analyticsService: AnalyticsService
) {


    @Operation(summary = "Search vulnerabilities metrics by various parameters")
    @GetMapping("search")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Successful processed search",
                content = [
                    Content(schema = Schema(implementation = VulnerabilityMetricSearchResponse::class))
                ]
            )
        ]
    )
    fun searchMetrics(
        @Parameter(
            description = "Unique identifier for the vulnerability",
            schema = Schema(type = "string", format = "uuid")
        )
        @RequestParam
        vulnerabilityId: UUID?,

        @Parameter(
            description = "Type of the metric, possible values: PRIMARY, SECONDARY",
            schema = Schema(implementation = MetricType::class)
        )
        @RequestParam
        metricType: MetricType?,

        @Parameter(
            description = "CVSS metric version, possible values: V2, V30, V31, V40",
            schema = Schema(implementation = CvssMetricVersion::class)
        )
        @RequestParam
        version: CvssMetricVersion?,

        @Parameter(
            description = "Vector string representing the vulnerability metrics",
            schema = Schema(format = "string")
        )
        @RequestParam
        vectorString: String?,

        @Parameter(
            description = "Minimum base score, 0.0 - 10.0",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        baseScoreMin: Double?,

        @Parameter(
            description = "Maximum base score, 0.0 - 10.0",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        baseScoreMax: Double?,

        @Parameter(
            description = "Severity of the base score, possible values: LOW, MEDIUM, HIGH, CRITICAL, NULL",
            schema = Schema(implementation = Severity::class)
        )
        @RequestParam
        baseSeverity: Severity?,

        @Parameter(
            description = "Attack vector, possible values: LOCAL, ADJACENT_NETWORK, NETWORK, PHYSICAL, NULL",
            schema = Schema(implementation = AttackVector::class)
        )
        @RequestParam
        attackVector: AttackVector?,

        @Parameter(
            description = "Attack complexity, possible values: HIGH, LOW, NULL",
            schema = Schema(implementation = AttackComplexity::class)
        )
        @RequestParam
        attackComplexity: AttackComplexity?,

        @Parameter(
            description = "Privileges required, possible values: NONE, LOW, HIGH, NULL",
            schema = Schema(implementation = PrivilegasRequired::class)
        )
        @RequestParam
        privilegesRequired: PrivilegasRequired?,

        @Parameter(
            description = "User interaction required, possible values: REQUIRED, NONE, NULL",
            schema = Schema(implementation = UserInteraction::class)
        )
        @RequestParam
        userInteraction: UserInteraction?,

        @Parameter(
            description = "Confidentiality impact, possible values: NULL, NONE, LOW, HIGH, PARTIAL, COMPLETE",
            schema = Schema(implementation = ConfidentialityImpact::class)
        )
        @RequestParam
        confidentialityImpact: ConfidentialityImpact?,

        @Parameter(
            description = "Integrity impact, possible values: NULL, NONE, LOW, HIGH, PARTIAL, COMPLETE",
            schema = Schema(implementation = IntegrityImpact::class)
        )
        @RequestParam
        integrityImpact: IntegrityImpact?,

        @Parameter(
            description = "Availability impact, possible values: NULL, NONE, LOW, HIGH, PARTIAL, COMPLETE",
            schema = Schema(implementation = AvailabilityImpact::class)
        )
        @RequestParam
        availabilityImpact: AvailabilityImpact?,

        @Parameter(
            description = "Minimum exportability score",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        exportabilityScoreMin: Double?,

        @Parameter(
            description = "Maximum exportability score",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        exportabilityScoreMax: Double?,

        @Parameter(
            description = "Minimum impact score",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        impactScoreMin: Double?,

        @Parameter(
            description = "Maximum impact score",
            schema = Schema(type = "number", format = "float")
        )
        @RequestParam
        impactScoreMax: Double?
    ): VulnerabilityMetricSearchResponse {
        return analyticsService.searchVulnerabilityMetrics(
            VulnerabilityMetricSearchRequest(
                vulnerabilityId = vulnerabilityId,
                metricType = metricType,
                version = version,
                baseScoreMin = baseScoreMin,
                baseScoreMax = baseScoreMax,
                baseSeverity = baseSeverity,
                attackVector = attackVector,
                vectorString = vectorString,
                attackComplexity = attackComplexity,
                privilegesRequired = privilegesRequired,
                userInteraction = userInteraction,
                confidentialityImpact = confidentialityImpact,
                integrityImpact = integrityImpact,
                impactScoreMin = impactScoreMin,
                impactScoreMax = impactScoreMax,
                availabilityImpact= availabilityImpact,
                exploitabilityScoreMin = exportabilityScoreMin,
                exploitabilityScoreMax = exportabilityScoreMax
            )
        )
    }
}