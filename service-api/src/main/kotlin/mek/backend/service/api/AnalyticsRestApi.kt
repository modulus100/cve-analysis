package mek.backend.service.api

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.responses.ApiResponses
import io.swagger.v3.oas.annotations.tags.Tag
import mek.backend.analytics.api.*
import mek.backend.analytics.repository.AnalyticsRepository
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

@Tag(name = "Analytics API", description = "Vulnerability Analytics")
@RequestMapping("/analytics")
@RestController
class AnalyticsRestApi(
    private val analytics: AnalyticsRepository
) {

    @GetMapping("severity-distribution")
    @Operation(summary = "Severity Distribution Analytics")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Provides severity distribution based on current dataset",
                content = [
                    Content(schema = Schema(implementation = SeverityDistributionResponse::class))
                ]
            )
        ]
    )
    fun getSeverityDistribution(): SeverityDistributionResponse {
        return SeverityDistributionResponse(
            severityDistribution = analytics.severityDistribution()
        )
    }

    @GetMapping("worst-products")
    @Operation(summary = "Top Worst Products")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top 50 products with worst with mos number of known vulnerabilities",
                content = [
                    Content(schema = Schema(implementation = WorstProductsResponse::class))
                ]
            )
        ]
    )
    fun worstProducts(
        @Parameter(description = "Number of top products to return, 50 is default")
        top: Int?
    ): WorstProductsResponse {
        return WorstProductsResponse(
            worstProducts = analytics.worstProducts(top ?: 50)
        )
    }

    @GetMapping("worst-platforms")
    @Operation(summary = "Top Worst Platforms")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top platforms with worst with most number of known vulnerabilities",
                content = [
                    Content(schema = Schema(implementation = WorstPlatformsResponse::class))
                ]
            )
        ]
    )
    fun worstPlatforms(
        @Parameter(description = "Number of top platforms to return, 50 is default",)
        top: Int?
    ): WorstPlatformsResponse {
        return WorstPlatformsResponse(
            platforms = analytics.worstPlatforms(top ?: 50)
        )
    }

    @GetMapping("highest-impact-vulnerabilities")
    @Operation(summary = "Top Vulnerabilities That Have The Highest Impact")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top vulnerabilities that have the highest impact",
                content = [
                    Content(schema = Schema(implementation = WorstPlatformsResponse::class))
                ]
            )
        ]
    )
    fun highestImpactVulnerabilities(
        @Parameter(description = "Number of top vulnerabilities to return, 10 is default",)
        top: Int?
    ): HighestImpactVulnerabilitiesResponse {
        return HighestImpactVulnerabilitiesResponse(
            vulnerabilities = analytics.highestImpactVulnerabilities(top ?: 10)
        )
    }

    @GetMapping("highest-exploitability-scores")
    @Operation(summary = "Top Exploits That Have The Highest Exploitability Scores")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top exploits that have the highest impact",
                content = [
                    Content(schema = Schema(implementation = HighestExplotobilityScoresResponse::class))
                ]
            )
        ]
    )
    fun highestExploitabilityScores(
        @Parameter(description = "Number of top exploits to return, 10 is default",)
        top: Int?
    ): HighestExplotobilityScoresResponse {
        return HighestExplotobilityScoresResponse(
            exploitabilityScores = analytics.highestExploitabilityScores(top ?: 10)
        )
    }

    @GetMapping("top-vector_attacks")
    @Operation(summary = "Top Vector Attacks")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top vector attacks",
                content = [
                    Content(schema = Schema(implementation = TopVectorAttacksResponse::class))
                ]
            )
        ]
    )
    fun topVectorAttacks(
        @Parameter(description = "Number of top vector attacks to return, 10 is default",)
        top: Int?
    ): TopVectorAttacksResponse {
        return TopVectorAttacksResponse(
            vectorAttacks = analytics.topVectorAttacks(top ?: 10)
        )
    }

    @GetMapping("top-vector_strings")
    @Operation(summary = "Top Vector Strings")
    @ApiResponses(
        value = [
            ApiResponse(
                responseCode = "200",
                description = "Top vector strings",
                content = [
                    Content(schema = Schema(implementation = TopVectorStringsResponse::class))
                ]
            )
        ]
    )
    fun topVectorStrings(
        @Parameter(description = "Number of top vector strings to return, 10 is default",)
        top: Int?
    ): TopVectorStringsResponse {
        return TopVectorStringsResponse(
            vectorStrings = analytics.topVectorStrings(top ?: 10)
        )
    }
}